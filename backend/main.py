import os
import torch
import torch.nn as nn
import numpy as np
import ffmpeg
import shutil
import asyncio
from fastapi import FastAPI, UploadFile, File, HTTPException, Request
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware

import cv2


app = FastAPI()

# ÂÖÅËÆ∏ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ÂÖÅËÆ∏ÊâÄÊúâÂüü
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ÂàõÂª∫ÁõÆÂΩï
UPLOAD_FOLDER = "videos"
OUTPUT_FOLDER = "videos"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# Â§ÑÁêÜÁä∂ÊÄÅ
processing_status = {"status": "idle", "progress": 0, "file": None}

# ‚úÖ ÈÄâÊã©ËÆæÂ§áÔºàÂ¶ÇÊûúÊúâ GPUÔºå‰ΩøÁî® GPUÔºâ
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"üöÄ ‰ΩøÁî®ËÆæÂ§á: {device}")

# ÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞èÔºà500MBÔºâ
MAX_FILE_SIZE = 500 * 1024 * 1024

# ÊâπÂ§ÑÁêÜÂ§ßÂ∞èÔºàbatch_sizeÔºâ
BATCH_SIZE = 16


# ‚úÖ Âä†ËΩΩË∂ÖÂàÜÊ®°Âûã
from tools import load_sr_model
sr_model = load_sr_model("FSRCNN",4,device)


async def super_resolve_batch(frames):
    """ ‰ΩøÁî® FSRCNN ËøõË°åË∂ÖÂàÜËæ®ÁéáÂ§ÑÁêÜ """
    frames = frames.to(device)  
    with torch.no_grad():  # ÂÖ≥Èó≠Ê¢ØÂ∫¶ËÆ°ÁÆóÔºåÂä†ÈÄüÊé®ÁêÜ
        upsampled_frames = sr_model(frames)
    return (upsampled_frames * 255).clamp(0, 255).to(torch.uint8).cpu()

async def upscale_cbcr_batch(cb_batch, cr_batch, target_size):
    """ ÊâßË°å CbCr ÊèíÂÄºÔºà‰ªçÁÑ∂ÊòØÂºÇÊ≠•Ôºâ """
    loop = asyncio.get_running_loop()
    cb_resized_list = await loop.run_in_executor(None, lambda: [cv2.resize(cb, target_size, interpolation=cv2.INTER_NEAREST) for cb in cb_batch])
    cr_resized_list = await loop.run_in_executor(None, lambda: [cv2.resize(cr, target_size, interpolation=cv2.INTER_NEAREST) for cr in cr_batch])
    return cb_resized_list, cr_resized_list



async def upscale_video_ffmpeg(input_path, output_path):
    """ ÈÄêÂ∏ßËØªÂèñËßÜÈ¢ëÔºåËøõË°åÊâπÈáèË∂ÖÂàÜËæ®ÁéáÂ§ÑÁêÜÔºåÂπ∂Áõ¥Êé•ÂÜôÂÖ• FFmpeg """
    print(f"üì• ËØªÂèñËßÜÈ¢ë: {input_path}")
    processing_status["status"] = "processing"
    processing_status["progress"] = 0
    processing_status["file"] = output_path

    # ËØªÂèñËßÜÈ¢ë‰ø°ÊÅØ
    try:
        probe = ffmpeg.probe(input_path)
        video_info = next((s for s in probe["streams"] if s["codec_type"] == "video"), None)
        if not video_info:
            raise ValueError("No video stream found")
    except ffmpeg.Error as e:
        print("‚ùå FFmpeg probe error:", e)
        processing_status["status"] = "error"
        return

    width, height = int(video_info["width"]), int(video_info["height"])
    total_frames = int(video_info.get("nb_frames", 1000))  # ‰º∞ÁÆóÊÄªÂ∏ßÊï∞
    fps = eval(video_info["r_frame_rate"])

    process_in = (
        ffmpeg.input(input_path)
        .output("pipe:", format="rawvideo", pix_fmt="rgb24")
        .run_async(pipe_stdout=True, pipe_stdin=True)
    )

    process_out = (
        ffmpeg.input("pipe:", format="rawvideo", pix_fmt="rgb24", s=f"{width*4}x{height*4}", r=fps)
        .output(output_path, pix_fmt="yuv420p", vcodec="libx264", r=fps)#, crf=23, preset="fast") 
        .overwrite_output()
        .run_async(pipe_stdin=True)
    )

    frame_size = width * height * 3
    frame_count = 0
    frame_buffer = []
    cb_buffer = []
    cr_buffer = []

    while True:
        raw_frame = process_in.stdout.read(frame_size)
        if not raw_frame:
            break

        # ËØªÂèñÂ∏ßÂπ∂Â≠òÂÖ•ÊâπÈáèÁºìÂÜ≤Âå∫
        frame = np.frombuffer(raw_frame, np.uint8).reshape(height, width, 3)
        
        # ‚úÖ 1. ËΩ¨Êç¢‰∏∫ YCbCr Ê†ºÂºèÔºà‰∫§Êç¢ Cb Âíå CrÔºâ
        frame_ycbcr = cv2.cvtColor(frame, cv2.COLOR_RGB2YCrCb)
        y_channel = frame_ycbcr[:, :, 0]
        cb_channel = frame_ycbcr[:, :, 2]  # ‰∫§Êç¢ Cb Âíå Cr
        cr_channel = frame_ycbcr[:, :, 1]

        # ÂΩí‰∏ÄÂåñ Y ÈÄöÈÅìÂπ∂Â≠òÂÖ• buffer
        y_tensor = torch.tensor(y_channel, dtype=torch.float32).unsqueeze(0) / 255.0  # [1, H, W]
        frame_buffer.append(y_tensor)

        # Â≠òÂÖ• CbCr ÈÄöÈÅì
        cb_buffer.append(cb_channel)
        cr_buffer.append(cr_channel)

        if len(frame_buffer) >= BATCH_SIZE:
            batch_tensor = torch.stack(frame_buffer).to(device)  # [B, 1, H, W]
            target_size = (width * 4, height * 4)

            # ‚úÖ ‰∏≤Ë°åÊâßË°åÔºàÂÖà Y Ë∂ÖÂàÜÔºåÂÜç CbCr ÊèíÂÄºÔºâ
            upsampled_y = await super_resolve_batch(batch_tensor)  # 1. Y Ë∂ÖÂàÜ
            upsampled_y = upsampled_y.squeeze(1).cpu().numpy().astype(np.uint8)  # [B, 4H, 4W]

            cb_resized_list, cr_resized_list = await upscale_cbcr_batch(cb_buffer, cr_buffer, target_size)  # 2. CbCr ÊèíÂÄº

            # ‚úÖ 3. ÈáçÊñ∞ÁªÑÂêà YCbCr Âπ∂ËΩ¨Êç¢Âõû RGB
            for i in range(BATCH_SIZE):
                ycrcb_upsampled = np.stack([upsampled_y[i], cr_resized_list[i],cb_resized_list[i]], axis=2)
                rgb_upsampled = cv2.cvtColor(ycrcb_upsampled, cv2.COLOR_YCrCb2RGB)
                process_out.stdin.write(rgb_upsampled.tobytes())  # ÂÜôÂÖ• FFmpeg

            # Ê∏ÖÁ©∫ÁºìÂÜ≤Âå∫
            frame_buffer = []
            cb_buffer = []
            cr_buffer = []

        frame_count += 1
        if frame_count % 10 == 0:
            processing_status["progress"] = int((frame_count / total_frames) * 100)
            print(f"üìà Â§ÑÁêÜËøõÂ∫¶: {processing_status['progress']}%")
        
        


     # ‚úÖ Â§ÑÁêÜÂâ©‰ΩôÁöÑÂ∏ß
    if frame_buffer:
        batch_tensor = torch.stack(frame_buffer).to(device)
        upsampled_y = await super_resolve_batch(batch_tensor)
        upsampled_y = upsampled_y.squeeze(1).cpu().numpy().astype(np.uint8)

        cb_resized_list, cr_resized_list = await upscale_cbcr_batch(cb_buffer, cr_buffer, (width * 4, height * 4))

        batch_rgb_frames = []
        for i in range(len(upsampled_y)):
            ycrcb_upsampled = np.stack([upsampled_y[i], cr_resized_list[i],cb_resized_list[i]], axis=2)
            rgb_upsampled = cv2.cvtColor(ycrcb_upsampled, cv2.COLOR_YCrCb2RGB)
            batch_rgb_frames.append(rgb_upsampled)

        process_out.stdin.write(np.array(batch_rgb_frames, dtype=np.uint8).tobytes())

    process_in.wait()
    process_out.stdin.close()
    process_out.wait()

    if os.path.exists(output_path):
        processing_status["status"] = "completed"
        processing_status["progress"] = 100
        print("‚úÖ Â§ÑÁêÜÂÆåÊàêÔºÅ")
    else:
        processing_status["status"] = "error"
        print("‚ùå Â§ÑÁêÜÂ§±Ë¥•ÔºåÊñá‰ª∂Êú™ÊâæÂà∞ÔºÅ")




@app.post("/upload")
async def upload_video(video: UploadFile = File(...), request: Request = None):
    """ Â§ÑÁêÜËßÜÈ¢ë‰∏ä‰º†Âπ∂ÂºÇÊ≠•Ë∂ÖÂàÜ """
    if request and int(request.headers.get("content-length", 0)) > MAX_FILE_SIZE:
        raise HTTPException(status_code=413, detail="File too large")

    file_path = os.path.join(UPLOAD_FOLDER, video.filename)
    output_path = os.path.join(OUTPUT_FOLDER, f"4k_{video.filename}")

    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(video.file, buffer)

    processing_status["status"] = "queued"
    processing_status["progress"] = 0

    # ‚úÖ ÂêØÂä®ÂºÇÊ≠•‰ªªÂä°Â§ÑÁêÜ
    asyncio.create_task(upscale_video_ffmpeg(file_path, output_path))

    return JSONResponse({"message": "Processing started", "output": f"4k_{video.filename}"})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)